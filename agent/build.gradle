plugins {
    id 'groovy'
    id 'io.github.rodm.teamcity-agent'
}

// TODO: The Develocity Bootstrap CLI tool should be downloadable from a public place.
def gradleRepoUsername = providers.gradleProperty("gradleInternalRepositoryUsername").orElse("").get()
def gradleRepoPassword = providers.gradleProperty("gradleInternalRepositoryPassword").orElse("").get()
def develocityBootstrapCliToolIsAvailable = gradleRepoUsername != "" && gradleRepoPassword != ""

repositories {
    mavenCentral()

    if (develocityBootstrapCliToolIsAvailable) {
        maven {
            url = uri("https://repo.grdev.net/artifactory/enterprise-libs-releases-local")

            credentials {
                username = gradleRepoUsername
                password = gradleRepoPassword
            }

            logger.log(LogLevel.LIFECYCLE, "Develocity bootstrap CLI resolution: ${url}")

            authentication {
                basic(BasicAuthentication)
            }

            content {
                it.includeModule("com.gradle", "develocity-bootstrap-cli")
            }
        }
    } else {
        logger.log(LogLevel.WARN, "Develocity bootstrap CLI tool is not available!")
    }
}

configurations {
    mvnExtensions {
        canBeConsumed = false
        canBeResolved = true
    }

    develocityBootstrapCliTool {
        canBeConsumed = false
        canBeResolved = true
    }
}

// Keep in sync with class `DevelocityBootstrapCliToolProvider`
def develocityBootstrapCliVersion = "0.1-98641805"

dependencies {
    if (develocityBootstrapCliToolIsAvailable) {
        develocityBootstrapCliTool "com.gradle:develocity-bootstrap-cli:${develocityBootstrapCliVersion}"
    }

    mvnExtensions project(path: ':agent:service-message-maven-extension', configuration: 'mvnExtension')
    mvnExtensions 'com.gradle:develocity-maven-extension:2.0.1'
    mvnExtensions 'com.gradle:common-custom-user-data-maven-extension:2.0.3'

    implementation('com.google.guava:guava:33.4.8-jre') {
        because("@VisibleForTest annotation")
    }

    testImplementation gradleTestKit()
    testImplementation('io.ratpack:ratpack-groovy-test:1.10.0-milestone-39') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.19.0'
    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0')
    testImplementation('org.spockframework:spock-junit4:2.3-groovy-3.0')
}

def generateInitScript = tasks.register('generateInitScript') {
    def referenceInitScript = file('src/main/resources/init-scripts/develocity-injection.init.gradle')
    def buildScanCollector = file('src/main/resources/init-scripts/build-scan-collector.groovy')
    def generatedInitScript = project.layout.buildDirectory.file('generated-resources/build-scan-init.gradle')
    inputs.file(referenceInitScript)
    inputs.file(buildScanCollector)
    outputs.file(generatedInitScript)
    doLast {
        generatedInitScript.get().asFile.text =
                referenceInitScript.text.replace("class BuildScanCollector {}", buildScanCollector.text)
    }
}

processResources {
    from configurations.mvnExtensions
    from configurations.develocityBootstrapCliTool
    from generateInitScript
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.BELLSOFT
    }
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.withType(JavaCompile).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        String javaCompilerVersion = findProperty('javaCompilerVersion') ?: '8'
        languageVersion = JavaLanguageVersion.of(javaCompilerVersion)
    }
}

teamcity {
    agent {
        archiveName = 'develocity-teamcity-plugin-agent.zip'
        descriptor {
            pluginDeployment {
                useSeparateClassloader = true
            }
        }
    }
}
