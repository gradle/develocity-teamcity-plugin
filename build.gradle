import com.github.rodm.teamcity.tasks.StartAgent
import com.github.rodm.teamcity.tasks.StartServer
import com.github.rodm.teamcity.tasks.StopAgent
import com.github.rodm.teamcity.tasks.StopServer

import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'groovy'
    id 'io.github.rodm.teamcity-server' version '1.5.5' // see https://github.com/rodm/gradle-teamcity-plugin
    id 'io.github.rodm.teamcity-environments' version '1.5.5'
    id 'com.github.breadmoirai.github-release' version '2.5.2'
    id 'org.nosphere.gradle.github.actions' version '1.4.0'
}

ext {
    CI = System.getenv().containsKey('CI') || project.properties.containsKey('CI')
    RELEASE = project.properties.containsKey('RELEASE')
    baseVersion = '1.1-rc-3'
    buildTime = new Date()
}

def buildTimestamp = CI ? timestamp(buildTime) : 'prerelease'
def snapshotVersion = RELEASE ? '' : buildTimestamp

group = 'com.gradle.develocity'
version = baseVersion + (snapshotVersion ? "-$snapshotVersion" : '')

def teamCityApiVersion = '2020.2'

dependencies {
    implementation 'com.google.code.gson:gson:2.13.1'
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation('io.github.dsibilio:badge-maker:1.0.4') {
        exclude group: 'org.slf4j'
    } // 2.x requires Java 17
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    provided "org.jetbrains.teamcity:oauth:$teamCityApiVersion"

    agent project(path: ':agent', configuration: 'plugin')

    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation 'io.ratpack:ratpack-groovy-test:1.9.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.BELLSOFT
    }
}

test {
    useJUnitPlatform()
}

teamcity {
    version = teamCityApiVersion

    server {
        descriptor {
            name = 'Develocity'
            displayName = 'Develocity integration'
            description = 'Provides integration with Develocity via auto-instrumentation of the CI jobs.'
            version = project.version
            vendorName = 'Gradle Inc.'
            vendorUrl = 'https://github.com'

            // optional properties
            useSeparateClassloader = true
            downloadUrl = 'https://github.com/gradle/develocity-teamcity-plugin'
        }

        publish {
            channels = ['Stable']
            token = System.getenv('TEAMCITY_PLUGIN_PUBLISH_TOKEN')
            notes = layout.projectDirectory.file('release/changes.md').asFile.text.trim()
        }
    }

    environments {
        downloadsDir = mkdir('.teamcity/dists')
        baseHomeDir = mkdir('.teamcity/servers')
        baseDataDir = mkdir('.teamcity/data')

        teamcity2025_3 {
            version = '2025.03.1'
            serverOptions '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
            agentOptions '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006'
        }
    }
}

[ StartAgent, StartServer, StopAgent, StopServer].each {
    tasks.withType(it).configureEach {
        notCompatibleWithConfigurationCache('Uses project')
    }
}

githubRelease {
    token = System.getenv('TEAMCITY_PLUGIN_GIT_TOKEN') ?: ''
    owner = 'gradle'
    repo = 'develocity-teamcity-plugin'
    targetCommitish = 'main'
    releaseName = gitHubReleaseName()
    tagName = gitReleaseTag()
    prerelease = !RELEASE
    overwrite = !RELEASE
    generateReleaseNotes = false
    body = layout.projectDirectory.file('release/changes.md').asFile.text.trim()
    releaseAssets(tasks.named('serverPlugin'))
}

repositories {
    mavenCentral()
}

tasks.register('createReleaseTag', CreateGitTag) {
    tagName = gitReleaseTag()
    overwriteExisting = !RELEASE
}

tasks.named('githubRelease') {
    dependsOn('createReleaseTag')
}

def gitHubReleaseName() {
    return RELEASE ? version.toString() : 'Development Build'
}

def gitReleaseTag() {
    return RELEASE ? "v${version}" : 'development-latest'
}

static timestamp(Date date) {
    def timestampFormat = new SimpleDateFormat('yyyyMMddHHmmss')
    timestampFormat.timeZone = TimeZone.getTimeZone('UTC')
    timestampFormat.format(date)
}
